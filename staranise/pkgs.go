package main

import (
	"reflect"
	"go.starlark.net/stargo"
	"go.starlark.net/starlark"

	π0 "fmt"
	π1 "go/token"
	π2 "go/ast"
	π3 "go/parser"
	π4 "go/types"
	π5 "golang.org/x/tools/go/analysis"
	π6 "golang.org/x/tools/go/analysis/passes/inspect"
)

var goPackages = starlark.StringDict{
	"fmt": &starlark.Module{
		Name: "fmt",
		Members: starlark.StringDict{
			"Errorf": stargo.ValueOf(π0.Errorf),
			"Formatter": stargo.TypeOf(reflect.TypeOf(new(π0.Formatter)).Elem()),
			"Fprint": stargo.ValueOf(π0.Fprint),
			"Fprintf": stargo.ValueOf(π0.Fprintf),
			"Fprintln": stargo.ValueOf(π0.Fprintln),
			"Fscan": stargo.ValueOf(π0.Fscan),
			"Fscanf": stargo.ValueOf(π0.Fscanf),
			"Fscanln": stargo.ValueOf(π0.Fscanln),
			"GoStringer": stargo.TypeOf(reflect.TypeOf(new(π0.GoStringer)).Elem()),
			"Print": stargo.ValueOf(π0.Print),
			"Printf": stargo.ValueOf(π0.Printf),
			"Println": stargo.ValueOf(π0.Println),
			"Scan": stargo.ValueOf(π0.Scan),
			"ScanState": stargo.TypeOf(reflect.TypeOf(new(π0.ScanState)).Elem()),
			"Scanf": stargo.ValueOf(π0.Scanf),
			"Scanln": stargo.ValueOf(π0.Scanln),
			"Scanner": stargo.TypeOf(reflect.TypeOf(new(π0.Scanner)).Elem()),
			"Sprint": stargo.ValueOf(π0.Sprint),
			"Sprintf": stargo.ValueOf(π0.Sprintf),
			"Sprintln": stargo.ValueOf(π0.Sprintln),
			"Sscan": stargo.ValueOf(π0.Sscan),
			"Sscanf": stargo.ValueOf(π0.Sscanf),
			"Sscanln": stargo.ValueOf(π0.Sscanln),
			"State": stargo.TypeOf(reflect.TypeOf(new(π0.State)).Elem()),
			"Stringer": stargo.TypeOf(reflect.TypeOf(new(π0.Stringer)).Elem()),
		},
	},
	"go/token": &starlark.Module{
		Name: "go/token",
		Members: starlark.StringDict{
			"ADD": stargo.ValueOf(π1.ADD),
			"ADD_ASSIGN": stargo.ValueOf(π1.ADD_ASSIGN),
			"AND": stargo.ValueOf(π1.AND),
			"AND_ASSIGN": stargo.ValueOf(π1.AND_ASSIGN),
			"AND_NOT": stargo.ValueOf(π1.AND_NOT),
			"AND_NOT_ASSIGN": stargo.ValueOf(π1.AND_NOT_ASSIGN),
			"ARROW": stargo.ValueOf(π1.ARROW),
			"ASSIGN": stargo.ValueOf(π1.ASSIGN),
			"BREAK": stargo.ValueOf(π1.BREAK),
			"CASE": stargo.ValueOf(π1.CASE),
			"CHAN": stargo.ValueOf(π1.CHAN),
			"CHAR": stargo.ValueOf(π1.CHAR),
			"COLON": stargo.ValueOf(π1.COLON),
			"COMMA": stargo.ValueOf(π1.COMMA),
			"COMMENT": stargo.ValueOf(π1.COMMENT),
			"CONST": stargo.ValueOf(π1.CONST),
			"CONTINUE": stargo.ValueOf(π1.CONTINUE),
			"DEC": stargo.ValueOf(π1.DEC),
			"DEFAULT": stargo.ValueOf(π1.DEFAULT),
			"DEFER": stargo.ValueOf(π1.DEFER),
			"DEFINE": stargo.ValueOf(π1.DEFINE),
			"ELLIPSIS": stargo.ValueOf(π1.ELLIPSIS),
			"ELSE": stargo.ValueOf(π1.ELSE),
			"EOF": stargo.ValueOf(π1.EOF),
			"EQL": stargo.ValueOf(π1.EQL),
			"FALLTHROUGH": stargo.ValueOf(π1.FALLTHROUGH),
			"FLOAT": stargo.ValueOf(π1.FLOAT),
			"FOR": stargo.ValueOf(π1.FOR),
			"FUNC": stargo.ValueOf(π1.FUNC),
			"File": stargo.TypeOf(reflect.TypeOf(new(π1.File)).Elem()),
			"FileSet": stargo.TypeOf(reflect.TypeOf(new(π1.FileSet)).Elem()),
			"GEQ": stargo.ValueOf(π1.GEQ),
			"GO": stargo.ValueOf(π1.GO),
			"GOTO": stargo.ValueOf(π1.GOTO),
			"GTR": stargo.ValueOf(π1.GTR),
			"HighestPrec": stargo.ValueOf(π1.HighestPrec),
			"IDENT": stargo.ValueOf(π1.IDENT),
			"IF": stargo.ValueOf(π1.IF),
			"ILLEGAL": stargo.ValueOf(π1.ILLEGAL),
			"IMAG": stargo.ValueOf(π1.IMAG),
			"IMPORT": stargo.ValueOf(π1.IMPORT),
			"INC": stargo.ValueOf(π1.INC),
			"INT": stargo.ValueOf(π1.INT),
			"INTERFACE": stargo.ValueOf(π1.INTERFACE),
			"LAND": stargo.ValueOf(π1.LAND),
			"LBRACE": stargo.ValueOf(π1.LBRACE),
			"LBRACK": stargo.ValueOf(π1.LBRACK),
			"LEQ": stargo.ValueOf(π1.LEQ),
			"LOR": stargo.ValueOf(π1.LOR),
			"LPAREN": stargo.ValueOf(π1.LPAREN),
			"LSS": stargo.ValueOf(π1.LSS),
			"Lookup": stargo.ValueOf(π1.Lookup),
			"LowestPrec": stargo.ValueOf(π1.LowestPrec),
			"MAP": stargo.ValueOf(π1.MAP),
			"MUL": stargo.ValueOf(π1.MUL),
			"MUL_ASSIGN": stargo.ValueOf(π1.MUL_ASSIGN),
			"NEQ": stargo.ValueOf(π1.NEQ),
			"NOT": stargo.ValueOf(π1.NOT),
			"NewFileSet": stargo.ValueOf(π1.NewFileSet),
			"NoPos": stargo.ValueOf(π1.NoPos),
			"OR": stargo.ValueOf(π1.OR),
			"OR_ASSIGN": stargo.ValueOf(π1.OR_ASSIGN),
			"PACKAGE": stargo.ValueOf(π1.PACKAGE),
			"PERIOD": stargo.ValueOf(π1.PERIOD),
			"Pos": stargo.TypeOf(reflect.TypeOf(new(π1.Pos)).Elem()),
			"Position": stargo.TypeOf(reflect.TypeOf(new(π1.Position)).Elem()),
			"QUO": stargo.ValueOf(π1.QUO),
			"QUO_ASSIGN": stargo.ValueOf(π1.QUO_ASSIGN),
			"RANGE": stargo.ValueOf(π1.RANGE),
			"RBRACE": stargo.ValueOf(π1.RBRACE),
			"RBRACK": stargo.ValueOf(π1.RBRACK),
			"REM": stargo.ValueOf(π1.REM),
			"REM_ASSIGN": stargo.ValueOf(π1.REM_ASSIGN),
			"RETURN": stargo.ValueOf(π1.RETURN),
			"RPAREN": stargo.ValueOf(π1.RPAREN),
			"SELECT": stargo.ValueOf(π1.SELECT),
			"SEMICOLON": stargo.ValueOf(π1.SEMICOLON),
			"SHL": stargo.ValueOf(π1.SHL),
			"SHL_ASSIGN": stargo.ValueOf(π1.SHL_ASSIGN),
			"SHR": stargo.ValueOf(π1.SHR),
			"SHR_ASSIGN": stargo.ValueOf(π1.SHR_ASSIGN),
			"STRING": stargo.ValueOf(π1.STRING),
			"STRUCT": stargo.ValueOf(π1.STRUCT),
			"SUB": stargo.ValueOf(π1.SUB),
			"SUB_ASSIGN": stargo.ValueOf(π1.SUB_ASSIGN),
			"SWITCH": stargo.ValueOf(π1.SWITCH),
			"TYPE": stargo.ValueOf(π1.TYPE),
			"Token": stargo.TypeOf(reflect.TypeOf(new(π1.Token)).Elem()),
			"UnaryPrec": stargo.ValueOf(π1.UnaryPrec),
			"VAR": stargo.ValueOf(π1.VAR),
			"XOR": stargo.ValueOf(π1.XOR),
			"XOR_ASSIGN": stargo.ValueOf(π1.XOR_ASSIGN),
		},
	},
	"go/ast": &starlark.Module{
		Name: "go/ast",
		Members: starlark.StringDict{
			"ArrayType": stargo.TypeOf(reflect.TypeOf(new(π2.ArrayType)).Elem()),
			"AssignStmt": stargo.TypeOf(reflect.TypeOf(new(π2.AssignStmt)).Elem()),
			"Bad": stargo.ValueOf(π2.Bad),
			"BadDecl": stargo.TypeOf(reflect.TypeOf(new(π2.BadDecl)).Elem()),
			"BadExpr": stargo.TypeOf(reflect.TypeOf(new(π2.BadExpr)).Elem()),
			"BadStmt": stargo.TypeOf(reflect.TypeOf(new(π2.BadStmt)).Elem()),
			"BasicLit": stargo.TypeOf(reflect.TypeOf(new(π2.BasicLit)).Elem()),
			"BinaryExpr": stargo.TypeOf(reflect.TypeOf(new(π2.BinaryExpr)).Elem()),
			"BlockStmt": stargo.TypeOf(reflect.TypeOf(new(π2.BlockStmt)).Elem()),
			"BranchStmt": stargo.TypeOf(reflect.TypeOf(new(π2.BranchStmt)).Elem()),
			"CallExpr": stargo.TypeOf(reflect.TypeOf(new(π2.CallExpr)).Elem()),
			"CaseClause": stargo.TypeOf(reflect.TypeOf(new(π2.CaseClause)).Elem()),
			"ChanDir": stargo.TypeOf(reflect.TypeOf(new(π2.ChanDir)).Elem()),
			"ChanType": stargo.TypeOf(reflect.TypeOf(new(π2.ChanType)).Elem()),
			"CommClause": stargo.TypeOf(reflect.TypeOf(new(π2.CommClause)).Elem()),
			"Comment": stargo.TypeOf(reflect.TypeOf(new(π2.Comment)).Elem()),
			"CommentGroup": stargo.TypeOf(reflect.TypeOf(new(π2.CommentGroup)).Elem()),
			"CommentMap": stargo.TypeOf(reflect.TypeOf(new(π2.CommentMap)).Elem()),
			"CompositeLit": stargo.TypeOf(reflect.TypeOf(new(π2.CompositeLit)).Elem()),
			"Con": stargo.ValueOf(π2.Con),
			"Decl": stargo.TypeOf(reflect.TypeOf(new(π2.Decl)).Elem()),
			"DeclStmt": stargo.TypeOf(reflect.TypeOf(new(π2.DeclStmt)).Elem()),
			"DeferStmt": stargo.TypeOf(reflect.TypeOf(new(π2.DeferStmt)).Elem()),
			"Ellipsis": stargo.TypeOf(reflect.TypeOf(new(π2.Ellipsis)).Elem()),
			"EmptyStmt": stargo.TypeOf(reflect.TypeOf(new(π2.EmptyStmt)).Elem()),
			"Expr": stargo.TypeOf(reflect.TypeOf(new(π2.Expr)).Elem()),
			"ExprStmt": stargo.TypeOf(reflect.TypeOf(new(π2.ExprStmt)).Elem()),
			"Field": stargo.TypeOf(reflect.TypeOf(new(π2.Field)).Elem()),
			"FieldFilter": stargo.TypeOf(reflect.TypeOf(new(π2.FieldFilter)).Elem()),
			"FieldList": stargo.TypeOf(reflect.TypeOf(new(π2.FieldList)).Elem()),
			"File": stargo.TypeOf(reflect.TypeOf(new(π2.File)).Elem()),
			"FileExports": stargo.ValueOf(π2.FileExports),
			"Filter": stargo.TypeOf(reflect.TypeOf(new(π2.Filter)).Elem()),
			"FilterDecl": stargo.ValueOf(π2.FilterDecl),
			"FilterFile": stargo.ValueOf(π2.FilterFile),
			"FilterFuncDuplicates": stargo.ValueOf(π2.FilterFuncDuplicates),
			"FilterImportDuplicates": stargo.ValueOf(π2.FilterImportDuplicates),
			"FilterPackage": stargo.ValueOf(π2.FilterPackage),
			"FilterUnassociatedComments": stargo.ValueOf(π2.FilterUnassociatedComments),
			"ForStmt": stargo.TypeOf(reflect.TypeOf(new(π2.ForStmt)).Elem()),
			"Fprint": stargo.ValueOf(π2.Fprint),
			"Fun": stargo.ValueOf(π2.Fun),
			"FuncDecl": stargo.TypeOf(reflect.TypeOf(new(π2.FuncDecl)).Elem()),
			"FuncLit": stargo.TypeOf(reflect.TypeOf(new(π2.FuncLit)).Elem()),
			"FuncType": stargo.TypeOf(reflect.TypeOf(new(π2.FuncType)).Elem()),
			"GenDecl": stargo.TypeOf(reflect.TypeOf(new(π2.GenDecl)).Elem()),
			"GoStmt": stargo.TypeOf(reflect.TypeOf(new(π2.GoStmt)).Elem()),
			"Ident": stargo.TypeOf(reflect.TypeOf(new(π2.Ident)).Elem()),
			"IfStmt": stargo.TypeOf(reflect.TypeOf(new(π2.IfStmt)).Elem()),
			"ImportSpec": stargo.TypeOf(reflect.TypeOf(new(π2.ImportSpec)).Elem()),
			"Importer": stargo.TypeOf(reflect.TypeOf(new(π2.Importer)).Elem()),
			"IncDecStmt": stargo.TypeOf(reflect.TypeOf(new(π2.IncDecStmt)).Elem()),
			"IndexExpr": stargo.TypeOf(reflect.TypeOf(new(π2.IndexExpr)).Elem()),
			"Inspect": stargo.ValueOf(π2.Inspect),
			"InterfaceType": stargo.TypeOf(reflect.TypeOf(new(π2.InterfaceType)).Elem()),
			"IsExported": stargo.ValueOf(π2.IsExported),
			"KeyValueExpr": stargo.TypeOf(reflect.TypeOf(new(π2.KeyValueExpr)).Elem()),
			"LabeledStmt": stargo.TypeOf(reflect.TypeOf(new(π2.LabeledStmt)).Elem()),
			"Lbl": stargo.ValueOf(π2.Lbl),
			"MapType": stargo.TypeOf(reflect.TypeOf(new(π2.MapType)).Elem()),
			"MergeMode": stargo.TypeOf(reflect.TypeOf(new(π2.MergeMode)).Elem()),
			"MergePackageFiles": stargo.ValueOf(π2.MergePackageFiles),
			"NewCommentMap": stargo.ValueOf(π2.NewCommentMap),
			"NewIdent": stargo.ValueOf(π2.NewIdent),
			"NewObj": stargo.ValueOf(π2.NewObj),
			"NewPackage": stargo.ValueOf(π2.NewPackage),
			"NewScope": stargo.ValueOf(π2.NewScope),
			"Node": stargo.TypeOf(reflect.TypeOf(new(π2.Node)).Elem()),
			"NotNilFilter": stargo.ValueOf(π2.NotNilFilter),
			"ObjKind": stargo.TypeOf(reflect.TypeOf(new(π2.ObjKind)).Elem()),
			"Object": stargo.TypeOf(reflect.TypeOf(new(π2.Object)).Elem()),
			"Package": stargo.TypeOf(reflect.TypeOf(new(π2.Package)).Elem()),
			"PackageExports": stargo.ValueOf(π2.PackageExports),
			"ParenExpr": stargo.TypeOf(reflect.TypeOf(new(π2.ParenExpr)).Elem()),
			"Pkg": stargo.ValueOf(π2.Pkg),
			"Print": stargo.ValueOf(π2.Print),
			"RECV": stargo.ValueOf(π2.RECV),
			"RangeStmt": stargo.TypeOf(reflect.TypeOf(new(π2.RangeStmt)).Elem()),
			"ReturnStmt": stargo.TypeOf(reflect.TypeOf(new(π2.ReturnStmt)).Elem()),
			"SEND": stargo.ValueOf(π2.SEND),
			"Scope": stargo.TypeOf(reflect.TypeOf(new(π2.Scope)).Elem()),
			"SelectStmt": stargo.TypeOf(reflect.TypeOf(new(π2.SelectStmt)).Elem()),
			"SelectorExpr": stargo.TypeOf(reflect.TypeOf(new(π2.SelectorExpr)).Elem()),
			"SendStmt": stargo.TypeOf(reflect.TypeOf(new(π2.SendStmt)).Elem()),
			"SliceExpr": stargo.TypeOf(reflect.TypeOf(new(π2.SliceExpr)).Elem()),
			"SortImports": stargo.ValueOf(π2.SortImports),
			"Spec": stargo.TypeOf(reflect.TypeOf(new(π2.Spec)).Elem()),
			"StarExpr": stargo.TypeOf(reflect.TypeOf(new(π2.StarExpr)).Elem()),
			"Stmt": stargo.TypeOf(reflect.TypeOf(new(π2.Stmt)).Elem()),
			"StructType": stargo.TypeOf(reflect.TypeOf(new(π2.StructType)).Elem()),
			"SwitchStmt": stargo.TypeOf(reflect.TypeOf(new(π2.SwitchStmt)).Elem()),
			"Typ": stargo.ValueOf(π2.Typ),
			"TypeAssertExpr": stargo.TypeOf(reflect.TypeOf(new(π2.TypeAssertExpr)).Elem()),
			"TypeSpec": stargo.TypeOf(reflect.TypeOf(new(π2.TypeSpec)).Elem()),
			"TypeSwitchStmt": stargo.TypeOf(reflect.TypeOf(new(π2.TypeSwitchStmt)).Elem()),
			"UnaryExpr": stargo.TypeOf(reflect.TypeOf(new(π2.UnaryExpr)).Elem()),
			"ValueSpec": stargo.TypeOf(reflect.TypeOf(new(π2.ValueSpec)).Elem()),
			"Var": stargo.ValueOf(π2.Var),
			"Visitor": stargo.TypeOf(reflect.TypeOf(new(π2.Visitor)).Elem()),
			"Walk": stargo.ValueOf(π2.Walk),
		},
	},
	"go/parser": &starlark.Module{
		Name: "go/parser",
		Members: starlark.StringDict{
			"AllErrors": stargo.ValueOf(π3.AllErrors),
			"DeclarationErrors": stargo.ValueOf(π3.DeclarationErrors),
			"ImportsOnly": stargo.ValueOf(π3.ImportsOnly),
			"Mode": stargo.TypeOf(reflect.TypeOf(new(π3.Mode)).Elem()),
			"PackageClauseOnly": stargo.ValueOf(π3.PackageClauseOnly),
			"ParseComments": stargo.ValueOf(π3.ParseComments),
			"ParseDir": stargo.ValueOf(π3.ParseDir),
			"ParseExpr": stargo.ValueOf(π3.ParseExpr),
			"ParseExprFrom": stargo.ValueOf(π3.ParseExprFrom),
			"ParseFile": stargo.ValueOf(π3.ParseFile),
			"SpuriousErrors": stargo.ValueOf(π3.SpuriousErrors),
			"Trace": stargo.ValueOf(π3.Trace),
		},
	},
	"go/types": &starlark.Module{
		Name: "go/types",
		Members: starlark.StringDict{
			"Array": stargo.TypeOf(reflect.TypeOf(new(π4.Array)).Elem()),
			"AssertableTo": stargo.ValueOf(π4.AssertableTo),
			"AssignableTo": stargo.ValueOf(π4.AssignableTo),
			"Basic": stargo.TypeOf(reflect.TypeOf(new(π4.Basic)).Elem()),
			"BasicInfo": stargo.TypeOf(reflect.TypeOf(new(π4.BasicInfo)).Elem()),
			"BasicKind": stargo.TypeOf(reflect.TypeOf(new(π4.BasicKind)).Elem()),
			"Bool": stargo.ValueOf(π4.Bool),
			"Builtin": stargo.TypeOf(reflect.TypeOf(new(π4.Builtin)).Elem()),
			"Byte": stargo.ValueOf(π4.Byte),
			"Chan": stargo.TypeOf(reflect.TypeOf(new(π4.Chan)).Elem()),
			"ChanDir": stargo.TypeOf(reflect.TypeOf(new(π4.ChanDir)).Elem()),
			"Checker": stargo.TypeOf(reflect.TypeOf(new(π4.Checker)).Elem()),
			"Comparable": stargo.ValueOf(π4.Comparable),
			"Complex128": stargo.ValueOf(π4.Complex128),
			"Complex64": stargo.ValueOf(π4.Complex64),
			"Config": stargo.TypeOf(reflect.TypeOf(new(π4.Config)).Elem()),
			"Const": stargo.TypeOf(reflect.TypeOf(new(π4.Const)).Elem()),
			"ConvertibleTo": stargo.ValueOf(π4.ConvertibleTo),
			"DefPredeclaredTestFuncs": stargo.ValueOf(π4.DefPredeclaredTestFuncs),
			"Default": stargo.ValueOf(π4.Default),
			"Error": stargo.TypeOf(reflect.TypeOf(new(π4.Error)).Elem()),
			"Eval": stargo.ValueOf(π4.Eval),
			"ExprString": stargo.ValueOf(π4.ExprString),
			"FieldVal": stargo.ValueOf(π4.FieldVal),
			"Float32": stargo.ValueOf(π4.Float32),
			"Float64": stargo.ValueOf(π4.Float64),
			"Func": stargo.TypeOf(reflect.TypeOf(new(π4.Func)).Elem()),
			"Id": stargo.ValueOf(π4.Id),
			"Identical": stargo.ValueOf(π4.Identical),
			"IdenticalIgnoreTags": stargo.ValueOf(π4.IdenticalIgnoreTags),
			"Implements": stargo.ValueOf(π4.Implements),
			"ImportMode": stargo.TypeOf(reflect.TypeOf(new(π4.ImportMode)).Elem()),
			"Importer": stargo.TypeOf(reflect.TypeOf(new(π4.Importer)).Elem()),
			"ImporterFrom": stargo.TypeOf(reflect.TypeOf(new(π4.ImporterFrom)).Elem()),
			"Info": stargo.TypeOf(reflect.TypeOf(new(π4.Info)).Elem()),
			"Initializer": stargo.TypeOf(reflect.TypeOf(new(π4.Initializer)).Elem()),
			"Int": stargo.ValueOf(π4.Int),
			"Int16": stargo.ValueOf(π4.Int16),
			"Int32": stargo.ValueOf(π4.Int32),
			"Int64": stargo.ValueOf(π4.Int64),
			"Int8": stargo.ValueOf(π4.Int8),
			"Interface": stargo.TypeOf(reflect.TypeOf(new(π4.Interface)).Elem()),
			"Invalid": stargo.ValueOf(π4.Invalid),
			"IsBoolean": stargo.ValueOf(π4.IsBoolean),
			"IsComplex": stargo.ValueOf(π4.IsComplex),
			"IsConstType": stargo.ValueOf(π4.IsConstType),
			"IsFloat": stargo.ValueOf(π4.IsFloat),
			"IsInteger": stargo.ValueOf(π4.IsInteger),
			"IsInterface": stargo.ValueOf(π4.IsInterface),
			"IsNumeric": stargo.ValueOf(π4.IsNumeric),
			"IsOrdered": stargo.ValueOf(π4.IsOrdered),
			"IsString": stargo.ValueOf(π4.IsString),
			"IsUnsigned": stargo.ValueOf(π4.IsUnsigned),
			"IsUntyped": stargo.ValueOf(π4.IsUntyped),
			"Label": stargo.TypeOf(reflect.TypeOf(new(π4.Label)).Elem()),
			"LookupFieldOrMethod": stargo.ValueOf(π4.LookupFieldOrMethod),
			"Map": stargo.TypeOf(reflect.TypeOf(new(π4.Map)).Elem()),
			"MethodExpr": stargo.ValueOf(π4.MethodExpr),
			"MethodSet": stargo.TypeOf(reflect.TypeOf(new(π4.MethodSet)).Elem()),
			"MethodVal": stargo.ValueOf(π4.MethodVal),
			"MissingMethod": stargo.ValueOf(π4.MissingMethod),
			"Named": stargo.TypeOf(reflect.TypeOf(new(π4.Named)).Elem()),
			"NewArray": stargo.ValueOf(π4.NewArray),
			"NewChan": stargo.ValueOf(π4.NewChan),
			"NewChecker": stargo.ValueOf(π4.NewChecker),
			"NewConst": stargo.ValueOf(π4.NewConst),
			"NewField": stargo.ValueOf(π4.NewField),
			"NewFunc": stargo.ValueOf(π4.NewFunc),
			"NewInterface": stargo.ValueOf(π4.NewInterface),
			"NewInterfaceType": stargo.ValueOf(π4.NewInterfaceType),
			"NewLabel": stargo.ValueOf(π4.NewLabel),
			"NewMap": stargo.ValueOf(π4.NewMap),
			"NewMethodSet": stargo.ValueOf(π4.NewMethodSet),
			"NewNamed": stargo.ValueOf(π4.NewNamed),
			"NewPackage": stargo.ValueOf(π4.NewPackage),
			"NewParam": stargo.ValueOf(π4.NewParam),
			"NewPkgName": stargo.ValueOf(π4.NewPkgName),
			"NewPointer": stargo.ValueOf(π4.NewPointer),
			"NewScope": stargo.ValueOf(π4.NewScope),
			"NewSignature": stargo.ValueOf(π4.NewSignature),
			"NewSlice": stargo.ValueOf(π4.NewSlice),
			"NewStruct": stargo.ValueOf(π4.NewStruct),
			"NewTuple": stargo.ValueOf(π4.NewTuple),
			"NewTypeName": stargo.ValueOf(π4.NewTypeName),
			"NewVar": stargo.ValueOf(π4.NewVar),
			"Nil": stargo.TypeOf(reflect.TypeOf(new(π4.Nil)).Elem()),
			"Object": stargo.TypeOf(reflect.TypeOf(new(π4.Object)).Elem()),
			"ObjectString": stargo.ValueOf(π4.ObjectString),
			"Package": stargo.TypeOf(reflect.TypeOf(new(π4.Package)).Elem()),
			"PkgName": stargo.TypeOf(reflect.TypeOf(new(π4.PkgName)).Elem()),
			"Pointer": stargo.TypeOf(reflect.TypeOf(new(π4.Pointer)).Elem()),
			"Qualifier": stargo.TypeOf(reflect.TypeOf(new(π4.Qualifier)).Elem()),
			"RecvOnly": stargo.ValueOf(π4.RecvOnly),
			"RelativeTo": stargo.ValueOf(π4.RelativeTo),
			"Rune": stargo.ValueOf(π4.Rune),
			"Scope": stargo.TypeOf(reflect.TypeOf(new(π4.Scope)).Elem()),
			"Selection": stargo.TypeOf(reflect.TypeOf(new(π4.Selection)).Elem()),
			"SelectionKind": stargo.TypeOf(reflect.TypeOf(new(π4.SelectionKind)).Elem()),
			"SelectionString": stargo.ValueOf(π4.SelectionString),
			"SendOnly": stargo.ValueOf(π4.SendOnly),
			"SendRecv": stargo.ValueOf(π4.SendRecv),
			"Signature": stargo.TypeOf(reflect.TypeOf(new(π4.Signature)).Elem()),
			"Sizes": stargo.TypeOf(reflect.TypeOf(new(π4.Sizes)).Elem()),
			"SizesFor": stargo.ValueOf(π4.SizesFor),
			"Slice": stargo.TypeOf(reflect.TypeOf(new(π4.Slice)).Elem()),
			"StdSizes": stargo.TypeOf(reflect.TypeOf(new(π4.StdSizes)).Elem()),
			"String": stargo.ValueOf(π4.String),
			"Struct": stargo.TypeOf(reflect.TypeOf(new(π4.Struct)).Elem()),
			"Tuple": stargo.TypeOf(reflect.TypeOf(new(π4.Tuple)).Elem()),
			"Typ": stargo.VarOf(&π4.Typ),
			"Type": stargo.TypeOf(reflect.TypeOf(new(π4.Type)).Elem()),
			"TypeAndValue": stargo.TypeOf(reflect.TypeOf(new(π4.TypeAndValue)).Elem()),
			"TypeName": stargo.TypeOf(reflect.TypeOf(new(π4.TypeName)).Elem()),
			"TypeString": stargo.ValueOf(π4.TypeString),
			"Uint": stargo.ValueOf(π4.Uint),
			"Uint16": stargo.ValueOf(π4.Uint16),
			"Uint32": stargo.ValueOf(π4.Uint32),
			"Uint64": stargo.ValueOf(π4.Uint64),
			"Uint8": stargo.ValueOf(π4.Uint8),
			"Uintptr": stargo.ValueOf(π4.Uintptr),
			"Universe": stargo.VarOf(&π4.Universe),
			"Unsafe": stargo.VarOf(&π4.Unsafe),
			"UnsafePointer": stargo.ValueOf(π4.UnsafePointer),
			"UntypedBool": stargo.ValueOf(π4.UntypedBool),
			"UntypedComplex": stargo.ValueOf(π4.UntypedComplex),
			"UntypedFloat": stargo.ValueOf(π4.UntypedFloat),
			"UntypedInt": stargo.ValueOf(π4.UntypedInt),
			"UntypedNil": stargo.ValueOf(π4.UntypedNil),
			"UntypedRune": stargo.ValueOf(π4.UntypedRune),
			"UntypedString": stargo.ValueOf(π4.UntypedString),
			"Var": stargo.TypeOf(reflect.TypeOf(new(π4.Var)).Elem()),
			"WriteExpr": stargo.ValueOf(π4.WriteExpr),
			"WriteSignature": stargo.ValueOf(π4.WriteSignature),
			"WriteType": stargo.ValueOf(π4.WriteType),
		},
	},
	"golang.org/x/tools/go/analysis": &starlark.Module{
		Name: "golang.org/x/tools/go/analysis",
		Members: starlark.StringDict{
			"Analyzer": stargo.TypeOf(reflect.TypeOf(new(π5.Analyzer)).Elem()),
			"Diagnostic": stargo.TypeOf(reflect.TypeOf(new(π5.Diagnostic)).Elem()),
			"Fact": stargo.TypeOf(reflect.TypeOf(new(π5.Fact)).Elem()),
			"Pass": stargo.TypeOf(reflect.TypeOf(new(π5.Pass)).Elem()),
			"Validate": stargo.ValueOf(π5.Validate),
		},
	},
	"golang.org/x/tools/go/analysis/passes/inspect": &starlark.Module{
		Name: "golang.org/x/tools/go/analysis/passes/inspect",
		Members: starlark.StringDict{
			"Analyzer": stargo.VarOf(&π6.Analyzer),
		},
	},
}
